{"version":3,"sources":["components/counterSlice.ts","components/Counter.tsx","components/Character.tsx","components/Tile.tsx","components/FlatTorus.tsx","components/flatTorusSlice.ts","App.tsx","store.ts","serviceWorker.ts","index.tsx"],"names":["counterSlice","createSlice","name","initialState","reducers","increment","state","decrement","reset","actions","mapDispatchToProps","connector","connect","value","counter","props","style","textAlign","type","margin","onClick","Character","position","src","alt","Tile","className","float","col","row","character","undefined","board","height","width","rowStart","rowEnd","j","colStart","colEnd","i","isCharacter","jr","ir","push","key","flatTorusSlice","goNorth","goSouth","goWest","goEast","useEnergy","resource","id","tabIndex","onKeyDown","event","onLoad","document","getElementById","focus","store","configureStore","reducer","combineReducers","counterSliceReducer","flatTorusSliceReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c77c1eb7.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nconst counterSlice = createSlice({\n  name: 'counter',\n  initialState: 8,\n  reducers: {\n    increment: (state) => state + 1,\n    decrement: (state) => state - 1,\n    reset: () => 0,\n  },\n});\n\nexport const { increment, decrement, reset } = counterSlice.actions;\nexport default counterSlice.reducer;\n","import React from 'react';\nimport {\n  ConnectedProps,\n  connect,\n} from 'react-redux';\n\nimport { RootState } from '../store';\nimport { increment, reset } from './counterSlice';\n\nconst Counter = (props: PropsFromRedux) => (\n  <div style={{ textAlign: 'center' }}>\n    <div>\n      {props.value}\n    </div>\n    <div>\n      <button type=\"button\" style={{ margin: 10 }} onClick={props.increment}>\n        Mighty\n      </button>\n      <button type=\"button\" style={{ margin: 10 }} onClick={props.reset}>\n        Reset\n      </button>\n    </div>\n  </div>\n);\n\nconst mapStateToProps = (state: RootState) => ({ value: state.counter });\nconst mapDispatchToProps = {\n  increment: () => increment(),\n  reset: () => reset(),\n};\nconst connector = connect(mapStateToProps, mapDispatchToProps);\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\nexport default connector(Counter);\n","import React from 'react';\n\nconst characterSVG = 'https://upload.wikimedia.org/wikipedia/commons/f/f5/ACC-L16832.svg';\n\nconst Character = () => (\n  <div style={{ position: 'absolute' }}>\n    <img src={characterSVG} alt=\"\" />\n  </div>\n);\n\nexport default Character;\n","import React from 'react';\n\nimport './Tile.css';\nimport Character from './Character';\n\ninterface TileProps {\n  character: boolean;\n  position: {\n    row: number,\n    col: number\n  }\n}\n\nconst Tile = (props: TileProps) => (\n  <div className=\"tile\">\n    <div style={{ float: 'left' }}>\n      {`(${props.position.col}, ${props.position.row})`}\n    </div>\n    {props.character ? <Character /> : undefined}\n  </div>\n);\n\nexport default Tile;\n","import React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport Tile from './Tile';\nimport { RootState } from '../store';\n\nconst FlatTorus = (props: PropsFromRedux) => {\n  const n = 3;\n  const { height, width, position } = props;\n  const board = [];\n  const rowStart = position.row - (n - 1) / 2;\n  const rowEnd = rowStart + n;\n  for (let j = rowStart; j < rowEnd; j += 1) {\n    const row = [];\n    const colStart = position.col - (n - 1) / 2;\n    const colEnd = colStart + n;\n    for (let i = colStart; i < colEnd; i += 1) {\n      const isCharacter = j === position.row && i === position.col;\n      const jr = (j + height) % height;\n      const ir = (i + width) % width;\n      row.push(<Tile\n        key={i}\n        character={isCharacter}\n        position={{ row: jr, col: ir }}\n      />);\n    }\n    board.push(<div key={j} className=\"row\">{row}</div>);\n  }\n  return (\n    <div>\n      <div>{board}</div>\n      <p style={{ width: 360 }}>\n        Use the arrow <kbd>↑</kbd> <kbd>↓</kbd> <kbd>→</kbd>\n        {' '}<kbd>←</kbd> keys to move around after selecting the\n        board. It consumes\n        <span className=\"badge badge-pill badge-dark\">\n          might\n        </span>, so boost it a little bit.\n      </p>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: RootState) => ({\n  ...state.board,\n});\nconst connector = connect(mapStateToProps);\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\nexport default connector(FlatTorus);\n","/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit';\n\ninterface FlatTorus {\n  width: number,\n  height: number,\n  position: {\n    row: number,\n    col: number\n  }\n}\n\nconst size = 11;\n\nconst initialState: FlatTorus = {\n  width: size,\n  height: size,\n  position: {\n    row: 0,\n    col: 0,\n  },\n};\n\nconst flatTorusSlice = createSlice({\n  name: 'flatTorusSlice',\n  initialState,\n  reducers: {\n    goNorth: (state) => {\n      state.position.row = (state.position.row + size - 1) % size;\n    },\n    goSouth: (state) => {\n      state.position.row = (state.position.row + size + 1) % size;\n    },\n    goWest: (state) => {\n      state.position.col = (state.position.col + size - 1) % size;\n    },\n    goEast: (state) => {\n      state.position.col = (state.position.col + size + 1) % size;\n    },\n  },\n});\n\nexport const {\n  goNorth, goSouth, goWest, goEast,\n} = flatTorusSlice.actions;\n\nexport default flatTorusSlice.reducer;\n","import React from 'react';\nimport './App.css';\n\nimport { ConnectedProps, connect } from 'react-redux';\nimport Counter from './components/Counter';\nimport FlatTorus from './components/FlatTorus';\nimport { RootState } from './store';\nimport { decrement } from './components/counterSlice';\nimport {\n  goNorth, goSouth, goWest, goEast,\n} from './components/flatTorusSlice';\n\nconst App = (props: PropsFromRedux) => {\n  const onKeyDown = (event: React.KeyboardEvent<HTMLDivElement>) => {\n    if (props.resource === 0) {\n      return;\n    }\n    props.useEnergy();\n    switch (event.key) {\n      case 'ArrowUp':\n        props.goNorth();\n        break;\n      case 'ArrowDown':\n        props.goSouth();\n        break;\n      case 'ArrowLeft':\n        props.goWest();\n        break;\n      case 'ArrowRight':\n        props.goEast();\n        break;\n      default:\n        break;\n    }\n  };\n  return (\n  // eslint-disable-next-line jsx-a11y/no-static-element-interactions\n    <div\n      className=\"App container\"\n      id=\"app\"\n    // eslint-disable-next-line jsx-a11y/no-noninteractive-tabindex\n      tabIndex={0}\n      onKeyDown={onKeyDown}\n      onLoad={() => document.getElementById('app')?.focus()}\n    >\n      <div className=\"row justify-content-around\">\n        <h1>Hello There!</h1>\n      </div>\n      <div className=\"row justify-content-around\">\n        <FlatTorus />\n      </div>\n      <div className=\"row justify-content-around\">\n        <Counter />\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: RootState) => ({\n  ...state.board,\n  resource: state.counter,\n});\nconst mapDispatchToProps = {\n  goNorth: () => goNorth(),\n  goSouth: () => goSouth(),\n  goWest: () => goWest(),\n  goEast: () => goEast(),\n  useEnergy: () => decrement(),\n};\nconst connector = connect(mapStateToProps, mapDispatchToProps);\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\nexport default connector(App);\n","import {\n  combineReducers,\n  configureStore,\n} from '@reduxjs/toolkit';\n\nimport counterSliceReducer from './components/counterSlice';\nimport flatTorusSliceReducer from './components/flatTorusSlice';\n\nexport const store = configureStore({\n  reducer: combineReducers({\n    counter: counterSliceReducer,\n    board: flatTorusSliceReducer,\n  }),\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\n","/* eslint-disable max-len */\n/* eslint-disable no-param-reassign */\n/* eslint-disable no-console */\n/* eslint-disable @typescript-eslint/no-use-before-define */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL || '',\n      window.location.href,\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport { store } from './store';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}